#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('simple-push:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

console.log("process.env.PORT: " + process.env.PORT);
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * 
 */
/*定义用户数组*/

var users = {};
io.on('connection', function (socket) {
  console.log("connection!");
  /*是否是新用户标识*/
  var isNewPerson = true;
  /*当前登录用户*/
  var username = null;
  socket.on('login', function (data) {
    username = data.username;
    if (username && users[username]) {
      isNewPerson = false;
    } else {
      isNewPerson = true;
      users[username] = {
        username
      };
      /*登录成功*/
      socket.emit('loginSuccess', data)
      /*向所有连接的客户端广播add事件*/
      io.sockets.emit('add', data)
    }

    if (!isNewPerson) { /*登录失败*/
      socket.emit('loginFail', '')
    }



  });

  /*app.js*/

  socket.on('sendMessage', function (data) {
    io.sockets.emit('receiveMessage', data);
  })
  /*退出登录*/

  /*写在io.on('connection', function (socket) {})里面*/

  socket.on('disconnect', function () {
    /*向所有连接的客户端广播leave事件*/
    io.sockets.emit('leave', username);
    if (username && users[username]) {
      users[username] = null;
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}