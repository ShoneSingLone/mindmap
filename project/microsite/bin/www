#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('microsite:server');
var fs = require('fs');
var http = require('http');
var https = require('https');

/************************************************* */
/*
//Get httpsPort from environment and store in Express.
var httpsPort = normalizePort('3000');
// Create HTTPS server.
var options = {
  key: fs.readFileSync('./certificate/private.pem', 'utf8'),
  cert: fs.readFileSync('./certificate/file.crt', 'utf8')
};
// console.log(options.key+"\n"+options.cert);
var serverHttps = https.createServer(options, app);
// Listen on provided httpsPort, on all network interfaces.
serverHttps.listen(httpsPort);
serverHttps.on('error', onError);
serverHttps.on('listening', onListening);
*/
/************************************************* */




/************************************************* */
// Get httpPort from environment and store in Express.
var httpPort = normalizePort('3000');

//Create HTTP server.
var serverHttp = http.createServer(app);

{
  var io = require('socket.io')(serverHttp);
  var users = {};
  io.on('connection', function (socket) {
    /*是否是新用户标识*/
    var isNewPerson = true;
    /*当前登录用户*/
    var username = null;
    socket.on('login', function (data) {
      username = data.username;
      if (username && users[username]) {
        isNewPerson = false;
      } else {
        isNewPerson = true;
        users[username] = {
          username
        };
        /*登录成功*/
        socket.emit('loginSuccess', data)
        /*向所有连接的客户端广播add事件*/
        io.sockets.emit('add', data)
      }

      if (!isNewPerson) { /*登录失败*/
        socket.emit('loginFail', '')
      }



    });

    /*app.js*/

    socket.on('sendMessage', function (data) {
      io.sockets.emit('receiveMessage', data);
    })
    /*退出登录*/

    /*写在io.on('connection', function (socket) {})里面*/

    socket.on('disconnect', function () {
      /*向所有连接的客户端广播leave事件*/
      io.sockets.emit('leave', username);
      if (username && users[username]) {
        users[username] = null;
      }
    });
  });

}


serverHttp.port = httpPort;
// Listen on provided httpPort, on all network interfaces.
serverHttp.listen(httpPort);
serverHttp.on('error', onError);
serverHttp.on('listening', onListening);


//Normalize a port into a number, string, or false.

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  var port = httpsPort;
  console.log("port:" + port);
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = this.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}